// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sitecore.Feature.Accounts.Specflow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegisterFeature : Xunit.IClassFixture<RegisterFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Register.feature"
#line hidden
        
        public RegisterFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Register", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(RegisterFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC1_Open Register page")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC1_OpenRegisterPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC1_Open Register page", new string[] {
                        "Ready"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("Habitat website is opened on Main Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When("Actor selects User icon on Navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.And("Actor clicks Register button on User form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.Then("Page URL ends on /Register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.And("Register title presents on page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field name"});
            table1.AddRow(new string[] {
                        "Email"});
            table1.AddRow(new string[] {
                        "Password"});
            table1.AddRow(new string[] {
                        "ConfirmPassword"});
#line 10
 testRunner.And("Register fields present on page", ((string)(null)), table1, "And ");
#line 15
 testRunner.And("Register button presents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC2_Register a new user")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC2_RegisterANewUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC2_Register a new user", new string[] {
                        "Ready"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("Habitat website is opened on Register page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "ConfirmPassword"});
            table2.AddRow(new string[] {
                        "kov3@sitecore.net",
                        "k",
                        "k"});
#line 21
 testRunner.When("Actor enters following data in to the register fields", ((string)(null)), table2, "When ");
#line 24
 testRunner.And("Actor clicks Register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("Actor selects User icon on Navigation bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("Page URL ends on BaseUrl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Button name"});
            table3.AddRow(new string[] {
                        "Logout"});
            table3.AddRow(new string[] {
                        "Edit details"});
#line 27
 testRunner.And("Following buttons present under User icon", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Button name"});
            table4.AddRow(new string[] {
                        "Login"});
            table4.AddRow(new string[] {
                        "Register"});
#line 31
 testRunner.And("Following buttons is no longer present under User icon", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC3_Invalid email")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC3_InvalidEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC3_Invalid email", new string[] {
                        "Ready"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("Habitat website is opened on Register page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "ConfirmPassword"});
            table5.AddRow(new string[] {
                        "kov$sitecore.net",
                        "k",
                        "k"});
#line 40
 testRunner.When("Actor enters following data in to the register fields", ((string)(null)), table5, "When ");
#line 43
 testRunner.And("Actor clicks Register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email field error message"});
            table6.AddRow(new string[] {
                        "Please enter a valid email address"});
#line 44
 testRunner.Then("System shows following message for the Email field", ((string)(null)), table6, "Then ");
#line 47
 testRunner.And("Page URL ends on /register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC4_Not unique email")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC4_NotUniqueEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC4_Not unique email", new string[] {
                        "Ready"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "ConfirmPassword"});
            table7.AddRow(new string[] {
                        "kov@sitecore.net",
                        "k",
                        "k"});
#line 52
 testRunner.Given("User is registered in Habitat and logged out", ((string)(null)), table7, "Given ");
#line 55
 testRunner.And("Habitat website is opened on Register page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "ConfirmPassword"});
            table8.AddRow(new string[] {
                        "kov@sitecore.net",
                        "k",
                        "k"});
#line 56
 testRunner.When("Actor enters following data in to the register fields", ((string)(null)), table8, "When ");
#line 59
 testRunner.And("Actor clicks Register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email field error message"});
            table9.AddRow(new string[] {
                        "A user with specified e-mail address already exists"});
#line 60
 testRunner.Then("System shows following message for the Email field", ((string)(null)), table9, "Then ");
#line 63
 testRunner.And("Page URL ends on /register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC5_Incorrect confirm password")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC5_IncorrectConfirmPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC5_Incorrect confirm password", new string[] {
                        "Ready"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("Habitat website is opened on Register page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "ConfirmPassword"});
            table10.AddRow(new string[] {
                        "kov@sitecore.net",
                        "k",
                        "a"});
#line 69
 testRunner.When("Actor enters following data in to the register fields", ((string)(null)), table10, "When ");
#line 72
 testRunner.And("Actor clicks Register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Password field error message"});
            table11.AddRow(new string[] {
                        "Your password confirmation does not match. Please enter a new password."});
#line 73
 testRunner.Then("System shows following message for the Email field", ((string)(null)), table11, "Then ");
#line 76
 testRunner.And("Page URL ends on /register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC6_One(email) of the required fields is empty")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC6_OneEmailOfTheRequiredFieldsIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC6_One(email) of the required fields is empty", new string[] {
                        "Ready"});
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("Habitat website is opened on Register page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Password",
                        "ConfirmPassword"});
            table12.AddRow(new string[] {
                        "k",
                        "k"});
#line 82
 testRunner.When("Actor enters following data in to the register fields with misssed email", ((string)(null)), table12, "When ");
#line 85
 testRunner.And("Actor clicks Register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Required field error message"});
            table13.AddRow(new string[] {
                        "Please enter a value for E-mail"});
#line 86
 testRunner.Then("System shows following message for the Email field", ((string)(null)), table13, "Then ");
#line 89
 testRunner.And("Page URL ends on /register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Register")]
        [Xunit.TraitAttribute("Description", "Accounts_Register_UC7_all off the required fields are empty")]
        [Xunit.TraitAttribute("Category", "Ready")]
        public virtual void Accounts_Register_UC7_AllOffTheRequiredFieldsAreEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accounts_Register_UC7_all off the required fields are empty", new string[] {
                        "Ready"});
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("Habitat website is opened on Register page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.When("Actor clicks Register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Required field error message"});
            table14.AddRow(new string[] {
                        "Please enter a value for E-mail"});
            table14.AddRow(new string[] {
                        "Please enter a value for Password"});
#line 95
 testRunner.Then("System shows following message for the Email field", ((string)(null)), table14, "Then ");
#line 99
 testRunner.And("Page URL ends on /register", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegisterFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegisterFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
