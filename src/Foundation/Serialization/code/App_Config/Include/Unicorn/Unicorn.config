<!--
	Unicorn.config

	This file configures the Unicorn serialization system, which enables automatic
	synchronization of Sitecore items without packages or manual merging.

	This file should be present on all environments Unicorn is present on. It is
	safe to leave on Content Delivery servers, as it changes no stock Sitecore
	configuration.

	http://github.com/kamsar/Unicorn
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<unicorn>
			<!--
				Configurations

				These define sets of configuration that Unicorn can run. For example, you might
				want to serialize certain items differently, or segregate configurations so
				that critical ones can run separately from non-essential ones to save time.

				See the README here for more information:
				https://github.com/kamsar/Unicorn/blob/master/README.md

				If you're familiar with DI and IoC containers, each configuration is effectively
				a dependency container which inherits from the global container defined in
				<defaults>.

				NOTE: Your own configurations should be defined in config patch files. See
				Unicorn.Configs.Default.example for a baseline you can make your own from.
			-->
			<configurations>
			</configurations>

			<!--
				These are the default Unicorn dependency configurations. These affect all
				configurations,	unless specifically overridden in the configuration definition.

				Each dependency type can have non-dependency constructor params passed to it by
				adding XML attributes to the main declaration - e.g. <foo type="..." bar="hello">
				would pass "hello" to public MyType(string bar)

				You can also receive any XML body passed to the dependency to a 'configNode'
				XmlElement parameter. This is how the SerializationPresetPredicate defines its
				preset.

				Did you know you can define your own global dependencies and override them in
				configurations? You can!
			-->
			<defaults>
				<!-- The source data store is where we read data from. Usually, this would be Sitecore. -->
				<sourceDataStore type="Rainbow.Storage.Sc.SitecoreDataStore, Rainbow.Storage.Sc" singleInstance="true"/>

				<!--
						The target data store is where we write serialized items to.

						Note the target data store's rootPath can be any of:
						Absolute filesystem path, e.g. c:\foo\bar
						Web-root-relative path, e.g. ~/data/serialization or ~/../out-of-root-serialization
						Data-folder-relative path, e.g. $(dataFolder)\serializedItems

						DO NOT SHARE A ROOT PATH BETWEEN CONFIGURATIONS (at least if you're using SFS).
						They can clobber each other's folders. You may inject the name of the current
						configuration as a variable with $(configurationName).

						The data cache uses a memory cache to store serialized items read from disk. It
						is recommended if using transparent syncing for performance. It's not really
						needed otherwise.
					-->
				<targetDataStore physicalRootPath="$(dataFolder)\Unicorn\$(configurationName)" useDataCache="false" type="Rainbow.Storage.SerializationFileSystemDataStore, Rainbow" singleInstance="true"/>

				<serializationFormatter type="Rainbow.Storage.Yaml.YamlSerializationFormatter, Rainbow.Storage.Yaml" singleInstance="true">
					<fieldFormatter type="Rainbow.Formatting.FieldFormatters.MultilistFormatter, Rainbow" />
					<fieldFormatter type="Rainbow.Formatting.FieldFormatters.XmlFieldFormatter, Rainbow" />
					<fieldFormatter type="Rainbow.Formatting.FieldFormatters.CheckboxFieldFormatter, Rainbow" />
				</serializationFormatter>

				<deserializer type="Unicorn.Deserialization.UnicornDeserializer, Unicorn" singleInstance="true" />
					<deserializerLogger type="Unicorn.Deserialization.DefaultDeserializerLogger, Unicorn" singleInstance="true"/>

				<evaluator type="Unicorn.Evaluators.SerializedAsMasterEvaluator, Unicorn" singleInstance="true"/>
					<evaluatorLogger type="Unicorn.Evaluators.DefaultSerializedAsMasterEvaluatorLogger, Unicorn" singleInstance="true"/>

				<!-- The ItemComparer handles comparing items for the Evaluator and SerializationConflictProcessor -->
				<itemComparer type="Rainbow.Diff.ItemComparer, Rainbow" singleInstance="true">
					<!--
					  You may add your own field comparisons here to determine equality - they are
					  evaluated in order and the first one to say it can compare gets the job.

					  Note: the DefaultComparison, which does a string Equals() comparison, is
					  automatically registered last and does not need to appear here.
					-->
					<fieldComparer type="Rainbow.Diff.Fields.XmlComparison, Rainbow" />
					<fieldComparer type="Rainbow.Diff.Fields.MultiLineTextComparison, Rainbow" />
					<fieldComparer type="Rainbow.Diff.Fields.MultilistComparison, Rainbow" />
					<fieldComparer type="Rainbow.Diff.Fields.CheckboxComparison, Rainbow" />
				</itemComparer>

				<!-- There is no default predicate, because this must be configured for each configuration. -->
				<predicate type="null"/>

				<!--
					The field filter can be used to ignore fields when comparing or serializing (i.e. don't write them to disk).
					Commonly, metadata fields such as Last Updated will be ignored to prevent SCM conflicts.
				-->
				<fieldFilter type="Rainbow.Filtering.ConfigurationFieldFilter, Rainbow" singleInstance="true">
					<exclude fieldID="{B1E16562-F3F9-4DDD-84CA-6E099950ECC0}" note="'Last run' field on Schedule template (used to register tasks)" />
					<exclude fieldID="{52807595-0F8F-4B20-8D2A-CB71D28C6103}" note="'__Owner' field on Standard Template" />
					<exclude fieldID="{F6D8A61C-2F84-4401-BD24-52D2068172BC}" note="'__Originator' field on Standard Template" />
					<exclude fieldID="{8CDC337E-A112-42FB-BBB4-4143751E123F}" note="'__Revision' field on Standard Template" />
					<exclude fieldID="{D9CF14B1-FA16-4BA6-9288-E8A174D4D522}" note="'__Updated' field on Standard Template" />
					<exclude fieldID="{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}" note="'__Updated by' field on Standard Template" />
					<exclude fieldID="{001DD393-96C5-490B-924A-B0F25CD9EFD8}" note="'__Lock' field on Standard Template" />
				</fieldFilter>
				
				<!-- 
					Controls configuration-level sync settings
					
					UpdateLinkDatabase: If true, the links will be updated for synced items after the sync has completed. If false (default) links are not updated for performance.
						Updating links is important if you are syncing user-facing content where link tracking is important. It is not very important for system items (templates/renderings).
						
					UpdateSearchIndex: If true, the search index(es) containing the item will be updated with item changes after the sync has completed. If false, indexing will not be updated for performance.
						Updating the index is important for content that relies on indexing, which may include most user-facing content items. Most of the time templates and renderings don't need indexing.
						
					MaxConcurrency: Controls how many threads Unicorn can use when syncing this configuration. Concurrency can usually increase sync speed 30-50% over single threading.
						IF YOUR CONFIGURATION INCLUDES TEMPLATES YOU MUST SET THIS TO 1 OR YOUR SYNC WILL HANG INDEFINITELY DUE TO A SITECORE ISSUE
						IF YOU ARE ON SITECORE 8.0 U2 OR EARLIER, YOU MUST SET THIS TO 1 DUE TO A SITECORE ISSUE
						
						This value can be set to significantly higher than the number of CPU cores, as these are largely I/O bound.
						Use fewer threads for HDDs or slow SQL servers, and more threads for SSDs.
						For a SSD workload on a quad-core CPU 16 seems to be a decent number.
						
					NOTE: UpdateLinkDatabase and UpdateSearchIndex also apply to items that are reloaded from disk when using Transparent Sync, as well as normal Sync.
				-->
				<syncConfiguration updateLinkDatabase="false" updateSearchIndex="false" maxConcurrency="1" type="Unicorn.Loader.DefaultSyncConfiguration, Unicorn" singleInstance="true" />

				<!-- Note that the DebugSerializationLoaderLogger is also available if you want more detailed logging and timing information. -->
				<loaderLogger type="Unicorn.Loader.DefaultSerializationLoaderLogger, Unicorn" singleInstance="true"/>

				<loaderConsistencyChecker type="Unicorn.Loader.DuplicateIdConsistencyChecker, Unicorn"/>
					<loaderConsistencyCheckerLogger type="Unicorn.Loader.DefaultDuplicateIdConsistencyCheckerLogger, Unicorn" singleInstance="false"/>

				<loaderDeserializeFailureRetryer type="Unicorn.Loader.DeserializeFailureRetryer, Unicorn" singleInstance="false"/>

				<dataProviderConfiguration enableTransparentSync="false" type="Unicorn.Data.DataProvider.DefaultUnicornDataProviderConfiguration, Unicorn" singleInstance="true" />
					<dataProviderLogger type="Unicorn.Data.DataProvider.DefaultUnicornDataProviderLogger, Unicorn" singleInstance="true"/>

				<logger type="Unicorn.Logging.PubSubLogger, Unicorn" singleInstance="true" />

				<syncCompleteDataCollector type="Unicorn.Pipelines.UnicornSyncComplete.DefaultSyncCompleteDataCollector, Unicorn" singleInstance="true" />
			</defaults>

			<!--
				The configuration provider wires up how the configuration(s) Unicorn is running are parsed.
				The default provider reads values from this config section.
			-->
			<configurationProvider type="Unicorn.Configuration.XmlConfigurationProvider, Unicorn"/>
		</unicorn>

		<settings>
			<!--
				Controls how many threads Unicorn can use when reserializing (NOT syncing).
				This value can be set to significantly higher than the number of CPU cores, as these are largely I/O bound.
				Use fewer threads for HDDs or slow SQL servers, and more threads for SSDs.
				For a SSD workload on a quad-core CPU 16 seems to be a decent number.

				NOTE: certain older versions of Sitecore 7.x and early versions of 8.0 (<= u2) have a SQL deadlocking issue that can be exposed with high concurrency.
				If you receive "timed out before getting a connection from the pool" errors when syncing, you may need to upgrade Sitecore
				or reduce the concurrency to 1 to resolve the issue. All versions of 7.5 have this problem.
				
				Recommended value: 16 (for Sitecore 8.0U2 or earlier, 1 - the default, because it's safe for all supported versions)
			-->
			<setting name="Unicorn.MaximumWriteConcurrency" value="1" />
		</settings>
		<pipelines>
			<!-- Run before a configuration starts sync. Handlers should implement IUnicornSyncBeginProcessor -->
			<unicornSyncBegin>
				<processor type="Unicorn.Pipelines.UnicornSyncBegin.ResetSyncCompleteDataCollector, Unicorn" />
			</unicornSyncBegin>
			
			<!-- Run after a configuration completes sync. Handlers should implement IUnicornSyncCompleteProcessor -->
			<unicornSyncComplete>
				<processor type="Unicorn.Pipelines.UnicornSyncComplete.DictionaryCacheClearer, Unicorn" />
				<processor type="Unicorn.Pipelines.UnicornSyncComplete.SyncedItemPostProcessor, Unicorn" />
				<processor type="Unicorn.Pipelines.UnicornSyncComplete.SyncCompleteLogger, Unicorn" />
			</unicornSyncComplete>
			
			<!-- Run after all configuration(s) complete sync. Handlers should implement IUnicornSyncEndProcessor -->
			<unicornSyncEnd>
				<processor type="Unicorn.Pipelines.UnicornSyncEnd.SendSerializationCompleteEvent, Unicorn" />
			</unicornSyncEnd>

			<!-- Run after a configuration completes reserialization. Handlers should implement IUnicornReserializeCompleteProcessor -->
			<unicornReserializeComplete>
			</unicornReserializeComplete>
		</pipelines>

		<processors>
			<saveUI>
				<!-- Prevent fake 'overwrite?' warnings when using transparent sync due to how it handles revisions -->
				<processor mode="on" type="Unicorn.Pipelines.SaveUi.TransparentSyncAwareCheckRevision, Unicorn" patch:instead="processor[contains(@type, 'CheckRevision')]"/>
			</saveUI>
		</processors>

		<sitecore.experienceeditor.speak.requests>
			<!-- Prevent fake 'overwrite?' warnings when using transparent sync due to how it handles revisions -->
			<request patch:instead="*[@name='ExperienceEditor.Save.CheckRevision']" name="ExperienceEditor.Save.CheckRevision" type="Unicorn.ExperienceEditor.Speak.Ribbon.Requests.SaveItem.TransparentSyncAwareCheckRevision, Unicorn"/>
		</sitecore.experienceeditor.speak.requests>
	</sitecore>
</configuration>
