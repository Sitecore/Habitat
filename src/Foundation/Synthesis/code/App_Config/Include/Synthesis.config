<?xml version="1.0"?>

<!--
	SYNTHESIS CONFIGURATION
	
	This file provides general configuration for the Synthesis mapping framework.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<synthesis>
			<providers>
				<!-- GENERATOR PARAMETERS PROVIDER 
					This provider configures the settings used when generating the domain model.
					The default provider reads its parameters from the config file.
				-->
				<generatorParametersProvider type="Synthesis.Configuration.ConfigurationGeneratorParametersProvider, Synthesis">
					<!--  ITEM NAMESPACE
						The root namespace to use for the generated items.
						E.g. your "Foo" template would be "Synthesis.Model.Concrete.Foo"
						if this setting were set to "Synthesis.Model.Concrete"
					-->
					<ItemNamespace>Synthesis.Model.Concrete</ItemNamespace>

					<!--  INTERFACE NAMESPACE
						The root namespace to use for the generated interfaces.
						E.g. your "Foo" template would be "Synthesis.Model.IFooItem"
						if this setting were set to "Synthesis.Model"
					-->
					<InterfaceNamespace>Synthesis.Model</InterfaceNamespace>

					<!--  MODEL OUTPUT PATH
						Path to write the output the generated code to. 
						Must have write access. Must end in ".cs"
						If the path begins with ~, it will be treated as site-root-relative, 
						otherwise it will be treated as an absolute path.
					
						Escaping the site root path IS supported (i.e. ~/../MyProject/Model/Model.Concrete.cs)
					-->
					<ModelOutputPath>~/Synthesis.Model.cs</ModelOutputPath>

					<!--  USE TEMPLATE PATH FOR NAMESPACE
						When false: All model items and interfaces live in their root namespace regardless of Sitecore structure
						When true: All model items and interfaces live in namespaces based on their relative path in Sitecore
									The root of this relative path is controlled by the TemplatePathRoot setting.
								
						For example:
						With a template "/sitecore/Templates/MySite/Pages/Foo",
						and TemplatePathRoot "/sitecore/Templates/MySite",
						and InterfaceNamespace "MySite.Model",
						If this is set to true: template would be represented by MySite.Model.Pages.IFooItem
						If this is set to false: template would be represented by MySite.Model.IFooItem
					-->
					<UseTemplatePathForNamespace>true</UseTemplatePathForNamespace>

					<!-- TEMPLATE PATH ROOT
						Sets the root Sitecore template path used to calculate relative output namespaces.
						
						For example if the InterfaceNamespace is "Foo.Model" and this is "/sitecore/templates"
						and the "/sitecore/templates/Shared/Bar" template is generated, it will result in 
						Foo.Model.Shared.IBarItem as the interface class name.
					-->
					<TemplatePathRoot>/sitecore/templates</TemplatePathRoot>

					<!--  ITEM BASE CLASS
						Type of the base class for all model items. 
						Should derive from Synthesis.StandardTemplateItem if using something custom.
						
						IMPORTANT: If a template is not mapped and you transform it into a Synthesis item,
						that item will always be returned as a Synthesis.StandardTemplateItem regardless of this setting!
					-->
					<ItemBaseClassType>Synthesis.StandardTemplateItem, Synthesis</ItemBaseClassType>

					<!--  ITEM BASE INTERFACE
						Type of the base class for all model items. 
						Should derive from Synthesis.IStandardTemplateItem if using something custom.
						The Item Base Class must implement this interface.
					-->
					<ItemBaseInterfaceType>Synthesis.IStandardTemplateItem, Synthesis</ItemBaseInterfaceType>
				</generatorParametersProvider>

				<!-- TEMPLATE INPUT PROVIDER
					This provider is responsible for generating the list of templates that should
					have model objects generated for them and managing which fields should be mapped. 
					Custom providers should derive from Synthesis.Templates.ITemplateListProvider.
				-->
				<templateInputProvider type="Synthesis.Configuration.ConfigurationTemplateInputProvider, Synthesis">
					<!-- INCLUDED PATHS
						One or more Template Specs to include templates from for generation/sync.
						If no included paths are defined, nothing will be generated.
						
						Template Specs can be one of the following:
						- Name ("Standard Template"). Matches any template regardless of location with this name.
						- ID ("{516F709D-C3E4-4652-868F-6C2AAD9921A1}"). Matches a template or template folder (includes all children) with the given ID.
						- Path ("/sitecore/Templates/My Template"). Matches a path in Sitecore. If a folder, applies to all children. If a template, applies to the specific template.
						- Wildcard ("/sitecore/Templates/*/Foo", "Foo*"). Matches any template with a name or path that the wildcard matches.
						
						When using UseTemplatePathForNamespace = true, make sure the 
						TemplatePathRoot setting is configured to be at a higher level
						than all the included paths to avoid confusing namespaces.
						
						IMPORTANT: You may use any element name to declare each path,
						but you can't use the same element name more than once.
					-->
					<includedPaths hint="list:AddTemplatePath">
						<!--<templates>/sitecore/Templates</templates>
						<fake-guid>{516F709D-C3E4-4652-868F-6C2AAD9921A1}</fake-guid>
						<wildcard>/sitecore/templates/Sites/*/Pages</wildcard>-->
					</includedPaths>

					<!--  EXCLUDED TEMPLATES 
						Excludes templates that match a Template Spec from generation/sync.
						
						Template Specs can be one of the following:
						- Name ("Standard Template"). Matches any template regardless of location with this name.
						- ID ("{516F709D-C3E4-4652-868F-6C2AAD9921A1}"). Matches a template or template folder (includes all children) with the given ID.
						- Path ("/sitecore/Templates/My Template"). Matches a path in Sitecore. If a folder, applies to all children. If a template, applies to the specific template.
						- Wildcard ("/sitecore/Templates/*/Foo", "Foo*"). Matches any template with a name or path that the wildcard matches.
						
						NOTE: If another included template inherits from an excluded template,
						an interface will still be generated for the excluded template. This can
						be used to your advantage to avoid generating concrete model objects for 
						templates that are "abstract" in Sitecore
						
						IMPORTANT: You may use any element name to declare each spec,
						but you can't use the same element name more than once.
					-->
					<excludedTemplates hint="list:AddTemplateExclusion">
						<!--<example>Template*</example>
						<fake-guid>{13794FA0-002E-4320-BF38-B29A41EBBA78}</fake-guid>
						<common-templates>/sitecore/templates/Common</common-templates>
						<folder-guid>{7189270B-F7E1-4405-BE9E-0C9241172BBB}</folder-guid>
						<wildcard>/sitecore/templates/Sites/*/Abstract</wildcard>-->
					</excludedTemplates>

					<!--  EXCLUDED FIELDS
						Excludes individual fields from having strongly typed properties generated.
						You may specify a field name globally to all templates, or specific to 
						an individual template by specifying it as "templatespec::fieldspec"
						
						Template or Field Specs can be one of the following:
						- Name ("Standard Template"). Matches any template or field with this name.
						- ID ("{516F709D-C3E4-4652-868F-6C2AAD9921A1}"). Matches a template or field with the given ID.
						- Path ("/sitecore/Templates/My Template"). Matches a template or field path in Sitecore.
						- Wildcard ("/sitecore/Templates/*/Foo", "Foo*"). Matches any template or field with a name or path that the wildcard matches.
						
						Examples:
						Title -> excludes all fields called title on any template
						My Template::Title -> excludes a field called title on a template called My Template
						* Page::Show* -> excludes any field that begins with "Show" on any template whose name ends with " Page"
						
						IMPORTANT: Excluding a field on a template excludes that field from ALL templates
						that contain the field (i.e. that inherit it, as well as its base template). This applies
						whether you exclude the field on the base template or a derived template.
						
						IMPORTANT: You may use any element name to declare each spec,
						but you can't use the same element name more than once.
					-->
					<excludedFields hint="list:AddFieldExclusion">
						<standard-fields>__*</standard-fields>
						<!--<show-in-nav>Show in Navigation</show-in-nav>
						<standard-created>Standard Template::__Created</standard-created>
						<folder-fake>/sitecore/Templates/Common/Folder::Fake Field</folder-fake>
						<whoa>RSS*::I*</whoa>-->
					</excludedFields>
				</templateInputProvider>

				<!--  FIELD MAPPING PROVIDER
					Controls which custom field class is mapped to a given Sitecore field type name.
					The custom classes need not derive from anything specific, but they MUST have a 
					constructor that accepts a Sitecore.Data.Field parameter. If no mapping exists for a field
					type, it will map to a TextField.
				
					You can accomplish some awesome things with custom mappings - for example providing
					a strongly typed access method for a custom field type that stores complex data as XML,
					or implementing custom link URL logic for your site by overriding the HyperlinkField class.
					
					Note: if upgrading from Synthesis 6 or earlier, to maintain backward compatibility you may
					wish to disable using interfaces for generated properties. To disable interfaces, simply remove
					the interface attribute on all of the field type mappings - concrete types are used if no interface type is present.
				-->
				<fieldMappingProvider type="Synthesis.Configuration.ConfigurationFieldMappingProvider, Synthesis">
					<fieldMappings hint="raw:AddMapping">
						<!-- Simple Types -->
						<map field="Checkbox" type="Synthesis.FieldTypes.BooleanField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IBooleanField, Synthesis" />
						<map field="Date" type="Synthesis.FieldTypes.DateTimeField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IDateTimeField, Synthesis" />
						<map field="Datetime" type="Synthesis.FieldTypes.DateTimeField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IDateTimeField, Synthesis" />
						<map field="File" type="Synthesis.FieldTypes.FileField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IFileField, Synthesis" />
						<map field="Image" type="Synthesis.FieldTypes.ImageField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IImageField, Synthesis" />
						<map field="Integer" type="Synthesis.FieldTypes.IntegerField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IIntegerField, Synthesis" />
						<map field="Multi-Line Text" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
						<map field="Number" type="Synthesis.FieldTypes.NumericField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.INumericField, Synthesis" />
						<map field="Password" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
						<map field="Rich Text" type="Synthesis.FieldTypes.RichTextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IRichTextField, Synthesis" />
						<map field="Single-Line Text" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />

						<!-- List Types -->
						<map field="Checklist" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceListField, Synthesis" />
						<map field="Droplist" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
						<map field="Grouped Droplink" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceField, Synthesis" />
						<map field="Grouped Droplist" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
						<map field="Multilist" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceListField, Synthesis" />
						<map field="Treelist" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceListField, Synthesis" />
						<map field="TreelistEx" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceListField, Synthesis" />
						<map field="Name Value List" type="Synthesis.FieldTypes.DictionaryField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IDictionaryField, Synthesis" />

						<!-- Link Types -->
						<map field="Droplink" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceField, Synthesis" />
						<map field="Droptree" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceField, Synthesis" />
						<map field="General Link" type="Synthesis.FieldTypes.HyperlinkField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IHyperlinkField, Synthesis" />
						
						<!-- System Types-->
						<map field="Internal Link" type="Synthesis.FieldTypes.PathItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IPathItemReferenceField, Synthesis" />

						<!-- Developer Types -->
						<map field="Tristate" type="Synthesis.FieldTypes.TristateField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITristateField, Synthesis" />

						<!-- Deprecated Types -->
						<map field="text" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
						<map field="memo" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
						<map field="lookup" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceField, Synthesis" />
						<map field="reference" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceField, Synthesis" />
						<map field="tree" type="Synthesis.FieldTypes.ItemReferenceField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceField, Synthesis" />
						<map field="tree list" type="Synthesis.FieldTypes.ItemReferenceListField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IItemReferenceListField, Synthesis" />
						<map field="html" type="Synthesis.FieldTypes.RichTextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IRichTextField, Synthesis" />
						<map field="link" type="Synthesis.FieldTypes.HyperlinkField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.IHyperlinkField, Synthesis" />
					</fieldMappings>

					<!--
						TEMPLATE FIELD MAPPINGS
						These optional mappings allow you to inject specific field implementations for specific template fields.
						For example, you might wish to inject a field type that adds special behaviour to a Title field depending on its context,
						or to perform reformatting of a specific field before display. Use your imagination :)
						
						Template: The name, full path, or ID of the template to inject the field on 
							Note templates that inherit this template will also inherit the injection - always inject on the template where the field is defined!
							
						Field: The name or ID of the template field to inject the custom field class on
						
						Type: The field type implementation
						
						Interface: (optional) the publicly-seen type of the item property (used for mockable interfaces)
					-->
					<!--<templateFieldMappings hint="raw:AddTemplateMapping">
						<map template="Content Section" field="Content" type="Synthesis.FieldTypes.TextField, Synthesis" interface="Synthesis.FieldTypes.Interfaces.ITextField, Synthesis" />
					</templateFieldMappings>-->
				</fieldMappingProvider>

				<!--  TEMPLATE SIGNATURE PROVIDER
					Provides a unique signature for a template and its field values.
					Used when comparing Sitecore to the domain model for synchronization.
					Override this if you need a more or less strict idea of what template equality means.
				-->
				<templateSignatureProvider type="Synthesis.Templates.Sha1TemplateSignatureProvider, Synthesis" />

				<!--  TYPE LIST PROVIDER
					Provides a set of types that should be considered when looking for template types to synchronize or initialize
				
					In other words, this provider should return all types in the assemblies that Synthesis' generated content
					lives in. It is appropriate for the provider to maintain an instance cache of these types as it will be invoked several times during initialization.
					
					IMPORTANT: You may use any element name to declare each assembly,
					but you can't use the same element name more than once.
				-->
				<typeListProvider type="Synthesis.Configuration.ConfigurationTypeListProvider, Synthesis" />
				<!--<typeListProvider type="Synthesis.Configuration.ConfigurationTypeListProvider, Synthesis">
					<assemblies hint="list:AddAssembly">
						<web>SynthesisDemo.Web</web>
						Wildcards are also supported:
						<foo>MyProject.Sites.*</foo>
					</assemblies>
				</typeListProvider>-->

				<!-- INDEX CONFIGURATION
					This points to the name of the content search index you intend to use to query your items over.
					The generator uses this index when calculating what to place in [IndexField] attributes on your template properties.
				-->
				<indexConfiguration name="sitecore_master_index" />
			</providers>
		</synthesis>

		<settings>
			<!--
				LOG SEARCH PROMOTIONS
				If true, promotion of content search-based items to database-based items will be logged to the Trace output
				Trace output is written to Sitecore logs in 8.x versions.
			-->
			<setting name="Synthesis.LogSearchPromotions" value="false" />

			<!-- 
				AUTO FRIEND METADATA
				
				If true and more than one configuration is registered, configurations will automatically consider themselves friends in the order registered.
				For example, suppose you registered a 'Core' config with an ICoreItem template.
				Then a 'Client' config with an IClientItem template that inherited the 'Core' template. This generated template would inherit ICoreItem from the first config instead of generating its own ICoreItem.
				And so on - a 'Ternary' config with ITertiusItem that inherited 'Client' could also operate in this way.
				
				If this is false, friending is done manually when adding additional configurations.
				
				Friending is important because only ONE class that represents a given template may exist at any given time.
			-->
			<setting name="Synthesis.AutoFriendMetadata" value="true" />
			
			<!--
				MODEL OUTPUT BASE PATH
				
				This setting allows you to specify a global base path which all configurations' model paths will use as a base path.
				A common usage of this setting would be for out of webroot development where you want to specify the source solution path
				as a base and the relative path within the solution as the model path.
				
				It it also possible to directly specify the base paths, however a setting can accept sc.variable values (e.g. $(sourcePath) for Habitat, $(dataFolder))
				whereas the model path cannot (Sitecore does not expand variable values in XML content, only attributes).
				
				If this value is blank, it is ignored. Otherwise it is prefixed to the ModelOutputPath (e.g. this = c:\foo\, ModelOutputPath = src\Bar\Model.cs, resulting path = c:\foo\src\Bar\Model.cs)
				
				Note that the path is directly prepended so you will need a trailing slash here, or a leading slash in the model path, to ensure a validly formatted path
			-->
			<setting name="Synthesis.ModelOutputBasePath" value="" />
		</settings>
		
		<pipelines>
			<initialize>
				<!-- REGISTER DEFAULT CONFIGURATION
					If this processor is registered, the configuration values below for providers are loaded into a Default Configuration.
					This enables Synthesis to work out of the box if you do not need multiple configurations.
					
					For multiple configurations you may leave this active if you want to keep the default configuration and add your own on top of it,
					or remove it to register only your own configurations. Configurations are registered by calling ProviderResolver.RegisterConfiguration()
					- e.g. in more initialize pipeline processors.
					
					NOTE: Do not register multiple configurations that contain overlapping templates.
				-->
				<processor type="Synthesis.Pipelines.Initialize.SynthesisConfigRegistrar, Synthesis">
					<assemblies hint="list:AddAssembly">
						<default>Synthesis</default>
					</assemblies>
				</processor>
			</initialize>
		</pipelines>
		<contentSearch>
			<indexConfigurations>
				<defaultLuceneIndexConfiguration>
					<fields hint="raw:AddComputedIndexField">
						<field fieldName="_templatesimplemented" storageType="yes" indexType="untokenized">Synthesis.ContentSearch.ComputedFields.InheritedTemplates, Synthesis</field>
					</fields>
				</defaultLuceneIndexConfiguration>
			</indexConfigurations>
		</contentSearch>
	</sitecore>
</configuration>